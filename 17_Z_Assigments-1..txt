Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.

========================================================================================================================================================================

Create the variable.tf file

vi variable.tf

variable "container_name" {
  default = "mysql"
}

variable "mysql_root_password" {
  default = "P4sSw0rd0!"
}

variable "mysql_network_name" {
  default = "mysql_internal_network"
}

variable "mysql_volume_name" {
  default = "mysql_data"
}

Now create the image.tf

vi image.tf

resource "docker_image" "mysql_image" {
  name = "mysql:5.7"
}

Now create the network.tf 

 vi network.tf 

resource "docker_network" "private_bridge_network" {
  name     = "${var.mysql_network_name}"
  driver   = "bridge"
  internal = true
}


Now create the volumes.tf 

 vi volume.tf 

resource "docker_volume" "mysql_data_volume" {
  name = "${var.mysql_volume_name}"
}

Now create the main.tf
 vi main.tf 

provider "docker" {  
  
}


resource "docker_container" "mysql_container" {
  name  = "ghost_database"
  image = "${docker_image.mysql_image.name}"

  env = [
    "MYSQL_ROOT_PASSWORD=${var.mysql_root_password}",
  ]

  volumes {
    volume_name    = "${docker_volume.mysql_data_volume.name}"
    container_path = "/var/lib/mysql"
  }

  networks_advanced {
    name    = "${docker_network.private_bridge_network.name}"
  }
}


Now initialize terraform 

Command : terraform init

Now deploy the plan 

Command : terraform plan -out tf_plan 

Now apply the plan 

Command : terraform apply tf_plan 

==================================================================================================================================================================
[ec2-user@ip-172-31-25-91 17z]$ terraform apply 17t.tfplan
docker_network.private_bridge_network: Creating...
  driver:        "" => "bridge"
  internal:      "" => "true"
  ipam_config.#: "" => "<computed>"
  ipam_driver:   "" => "default"
  name:          "" => "mysql_internal_network"
  options.%:     "" => "<computed>"
  scope:         "" => "<computed>"
docker_image.mysql_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "mysql:5.7"
docker_volume.mysql_data_volume: Creating...
  driver:     "" => "<computed>"
  mountpoint: "" => "<computed>"
  name:       "" => "mysql_data"
docker_volume.mysql_data_volume: Creation complete after 0s (ID: mysql_data)
docker_network.private_bridge_network: Creation complete after 2s (ID: b87d7570a922d2b6d1b212c61c0825404154eb36cd7bd54d567d89d3ecc16ecc)
docker_image.mysql_image: Creation complete after 8s (ID: sha256:a4fdfd462add8e63749aa08ff0044b13d342a042965f1ec6744586cda10dfce9mysql:5.7)
docker_container.mysql_container: Creating...
  attach:                                   "" => "false"
  bridge:                                   "" => "<computed>"
  command.#:                                "" => "<computed>"
  container_logs:                           "" => "<computed>"
  entrypoint.#:                             "" => "<computed>"
  env.#:                                    "" => "1"
  env.1963307837:                           "" => "MYSQL_ROOT_PASSWORD=P4sSw0rd0!"
  exit_code:                                "" => "<computed>"
  gateway:                                  "" => "<computed>"
  hostname:                                 "" => "<computed>"
  image:                                    "" => "mysql:5.7"
  ip_address:                               "" => "<computed>"
  ip_prefix_length:                         "" => "<computed>"
  ipc_mode:                                 "" => "<computed>"
  labels.#:                                 "" => "<computed>"
  log_driver:                               "" => "<computed>"
  log_opts.%:                               "" => "<computed>"
  logs:                                     "" => "false"
  must_run:                                 "" => "true"
  name:                                     "" => "ghost_database"
  network_data.#:                           "" => "<computed>"
  networks_advanced.#:                      "" => "1"
  networks_advanced.759574863.aliases.#:    "" => "0"
  networks_advanced.759574863.ipv4_address: "" => ""
  networks_advanced.759574863.ipv6_address: "" => ""
  networks_advanced.759574863.name:         "" => "mysql_internal_network"
  read_only:                                "" => "false"
  restart:                                  "" => "no"
  rm:                                       "" => "false"
  shm_size:                                 "" => "<computed>"
  start:                                    "" => "true"
  user:                                     "" => "<computed>"
  volumes.#:                                "" => "1"
  volumes.2351606827.container_path:        "" => "/var/lib/mysql"
  volumes.2351606827.from_container:        "" => ""
  volumes.2351606827.host_path:             "" => ""
  volumes.2351606827.read_only:             "" => ""
  volumes.2351606827.volume_name:           "" => "mysql_data"
docker_container.mysql_container: Creation complete after 1s (ID: 07ccda573ab1855040d9603a8f5c1a36713b3df3b8644900c308a5c53dbe2b0e)

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.
[ec2-user@ip-172-31-25-91 17z]$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                          PORTS               NAMES
07ccda573ab1        mysql:5.7           "docker-entrypoint.s…"   11 seconds ago      Up 9 seconds                                        ghost_database
dca3aabbfbc1        registry:2          "/entrypoint.sh /etc…"   9 days ago          Restarting (1) 42 seconds ago                       registry
[ec2-user@ip-172-31-25-91 17z]$ docker network ls
NETWORK ID          NAME                     DRIVER              SCOPE
98fa61f7a4ec        bridge                   bridge              local
52b464657040        docker_gwbridge          bridge              local
5e67ba64af0e        host                     host                local
jybtlkodcjbo        ingress                  overlay             swarm
b87d7570a922        mysql_internal_network   bridge              local
73fa3e670793        none                     null                local
[ec2-user@ip-172-31-25-91 17z]$ docker volume ls
DRIVER              VOLUME NAME
local               1b048ad19c61936865d5cca721e1ef668174fb0b209a1cb6f4518eaddc394d2f
local               7943f70f6789a27a94e2414439371c05585b2cad5c394e0446f2469785fe6e42
local               d688e69c440cfe5073bf6f37ca93e689d3dfb32d44623ebf2cf9c8f3257c874b
local               e305dd8bc2dde8b5ab8ef49e6537ed8448799ae013947ae6075c4a580edf9ed5
