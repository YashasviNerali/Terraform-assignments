Assignment -2-Z-24::-

Using Join and Count to Create Multiple S3 Buckets

Find three files as below:-

main.tf :-
---------
provider "aws" {
  region = "${var.aws_region}"
}

resource "random_id" "tf_bucket_id" {
  byte_length = 2
}

resource "aws_s3_bucket" "tf_code" {
    bucket        = "${var.project_name}-${random_id.tf_bucket_id.dec}"
    acl           = "private"

    force_destroy =  true

    tags {
      Name = "tf_bucket"
    }
}


variables.tf:-
--------------
variable "aws_region" {
  default = "us-east-1"
}

variable "project_name" {
  default = "la-terraform"
}


outputs.tf:-
-------------
output "bucketname" {
  value = "${aws_s3_bucket.tf_code.id}"
}



Update the Variables File:-
Edit variables.tf.
Add a new variable number_of_instances.
Set the the default to 2.

Update the Main File:-
Update random_id and add a count.
Set the value count to use the number_of_instances variable.
Update aws_s3_bucket and add a count.
Update random_id.tf_bucket_id.dec so it iterates through the count. Update the Name tag so that tf_bucket is appended with the count index plus one.

Update the Outputs File:-
Update the bucketname output value to use the join function so that it returns a comma delimited list of bucket names.

Deploy the Infrastructure:-
Initialize Terraform.
Validate the files.
Deploy the S3 buckets.








Solution :

root@Bastion-Host-Server terraform]# cat main.tf
/* main.tf :- */

provider "aws" {
  region = "${var.aws_region}"
}

resource "random_id" "tf_bucket_id" {
  byte_length = 2
  count = 2
}

resource "aws_s3_bucket" "tf_code" {
    count         = 2
    bucket        = "${var.project_name}-${random_id.tf_bucket_id.*.dec[count.index]}"
    acl           = "private"
    force_destroy =  true

    tags {
      Name = "tf_bucket"
    }
}


/* ::variables.tf:-*/

variable "aws_region" {
  default = "us-east-1"
}

variable "project_name" {
  default = "la-terraform"
}


/* ::outputs.tf:- */

output "bucketname" {
  value = "${join(", ", aws_s3_bucket.tf_code.*.id)}"
}

[root@Bastion-Host-Server terraform]#

On Tue, Jun 2, 2020 at 12:06 PM Anil Kumar Rajineedi <ani181109@gmail.com> wrote:


Hi Arun,

Using Terraform to Create a RandomID and S3 Buckets

Create the Main file:-
Create the main.tf Terraform file.
Add a provider, aws.
Set the region to use a variable called aws_region.
Add a random_id resource and name it tf_bucket_id.
Set the byte_length to 2.

Add a resource, aws_s3_bucket, and name it tf_code.
The bucket name will be set using a variable called project_name, followed by a -, and will use the dec attribute from tf_bucket_id.
Set the acl to private.
Set force_destroy to true.
Create a tag with a name to tf_bucket.

Create the Variables File:-
Create the variables.tf Terraform file.
Add a variable called aws_region.
Set the default to us-east-1. Add a variable called project_name.
Set the default to la-terraform.

Create the outputs file:-
Create the outputs.tf Terraform file.
Add a output called bucketname.
The value should be set to id, coming from tf_code.

Deploy the infrastructure:-
Initialize Terraform.
Validate the files.
Deploy the S3 bucket.

Solution's:--

[root@Bastion-Host-Server terraform]# cat main.tf
/*  ::S3 Bucket Creation:: */

provider "aws" {

         region = "us-east-1"

}

/* :::- Variable S3 Bucket creation -::: */

variable "mys3bucket_name" {
          default = "arun-s3-buckt"
}

resource "random_id" "myrandomid" {
  byte_length = 2
}

resource "aws_s3_bucket" "mys3buckt" {
  bucket = "${var.mys3bucket_name}-${random_id.myrandomid.dec}"
  acl = "private"
  force_destroy = true
  tags = {
    Name        = "${var.mys3bucket_name}-${random_id.myrandomid.dec}"
  }
}

/* :: OutPut of S3 Bucket :: */

output "bucket_name" {

        value = "${aws_s3_bucket.mys3buckt.bucket}"
}
[root@Bastion-Host-Server terraform]#


====================

To execute above code , you must do terraform install and AWS configure , once aws configure get completed follow the below steps.

terraform init .

terraform plan 

terraform apply -auto-approve

To Delete 

terraform destroy -auto-approve


