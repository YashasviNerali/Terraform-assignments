Create a file called main.tf.
Create a docker image resource and call it nginx_image.
Set the name of the image to nginx:latest.
Save and exit the file.

Initialize Terraform.
Plan the deploy and output a terraform plan called tf_image_plan.
Apply the plan using tf_image_plan.

=======================================================================================================================================================================
$ vi main.tf
 
resource "docker_image" "nginx_image" {
  name = "nginx:latest"
}

# Start the Container
resource "docker_container" "container_id" {
  name  = "blog"
  image = "${docker_image.nginx_image.latest}"
  }

terraform init
terraform plan -out tf_image_plan
terraform apply tf_image_plan
================================================================
[ec2-user@ip-172-31-25-91 9z1]$ terraform plan -out tf_image_plan
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.


------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  + docker_container.container_id
      id:               <computed>
      attach:           "false"
      bridge:           <computed>
      command.#:        <computed>
      container_logs:   <computed>
      entrypoint.#:     <computed>
      env.#:            <computed>
      exit_code:        <computed>
      gateway:          <computed>
      hostname:         <computed>
      image:            "${docker_image.nginx_image.latest}"
      ip_address:       <computed>
      ip_prefix_length: <computed>
      ipc_mode:         <computed>
      labels.#:         <computed>
      log_driver:       "json-file"
      logs:             "false"
      must_run:         "true"
      name:             "blog"
      network_data.#:   <computed>
      read_only:        "false"
      restart:          "no"
      rm:               "false"
      shm_size:         <computed>
      start:            "true"

  + docker_image.nginx_image
      id:               <computed>
      latest:           <computed>
      name:             "nginx:latest"


Plan: 2 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: tf_image_plan

To perform exactly these actions, run the following command to apply:
    terraform apply "tf_image_plan"

[ec2-user@ip-172-31-25-91 9z1]$ terraform apply tf_image_plan
docker_image.nginx_image: Creating...
  latest: "" => "<computed>"
  name:   "" => "nginx:latest"
docker_image.nginx_image: Creation complete after 5s (ID: sha256:4392e5dad77dbaf6a573650b0fe1e282...ba6e6cea00a27c7d4b68539b81nginx:latest)
docker_container.container_id: Creating...
  attach:           "" => "false"
  bridge:           "" => "<computed>"
  command.#:        "" => "<computed>"
  container_logs:   "" => "<computed>"
  entrypoint.#:     "" => "<computed>"
  env.#:            "" => "<computed>"
  exit_code:        "" => "<computed>"
  gateway:          "" => "<computed>"
  hostname:         "" => "<computed>"
  image:            "" => "sha256:4392e5dad77dbaf6a573650b0fe1e282b57c5fba6e6cea00a27c7d4b68539b81"
  ip_address:       "" => "<computed>"
  ip_prefix_length: "" => "<computed>"
  ipc_mode:         "" => "<computed>"
  labels.#:         "" => "<computed>"
  log_driver:       "" => "json-file"
  logs:             "" => "false"
  must_run:         "" => "true"
  name:             "" => "blog"
  network_data.#:   "" => "<computed>"
  read_only:        "" => "false"
  restart:          "" => "no"
  rm:               "" => "false"
  shm_size:         "" => "<computed>"
  start:            "" => "true"
docker_container.container_id: Creation complete after 0s (ID: dbd9f4fe0c3246ef05e5d8bf0cee1147334341fe90647472d99c4088c1bbe291)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
[ec2-user@ip-172-31-25-91 9z1]$ ls
main.tf  terraform.tfstate  tf_image_plan
