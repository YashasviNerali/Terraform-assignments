Create the variables file (variables.tf) and add four variables with these default values:
	1. container_name: mysql.
	2. mysql_root_password: P4sSw0rd0!.
	3. mysql_network_name: mysql_internal_network.
	4. mysql_volume_name: mysql_data.

Create the images file (images.tf)
	1. Add the docker_image resource and call it mysql_image.
	2. Set the name to mysql:5.7.

Create the networks file (networks.tf):-
	1. Add the docker_network resource and call it private_bridge_network.
	2. Set the name to use the mysql_network_name variable.
	3. Set the driver to bridge.
	4. Set internal to true.

Create the volumes file (volume.tf):-
	1. In volumes.tf add the docker_volume resource and call it mysql_data_volume.
	2. Set the name to use the mysql_volume_name variable.

Create the main file (main.tf):-
	1. In main.tf add the docker_container resource and call it mysql_container.
	2. Set the name to use the container_name variable.
	3. Set the image to use the name of the image coming from docker_image.
	4. Create an environment variable for MYSQL_ROOT_PASSWORD and set it to the mysql_root_password variable.
	5. Configure the container volume to use the volume created by docker_volume, and make sure the container_path is set to /var/lib/mysql.
	7. The container needs to use the network created by docker_network.

Deploy the infrastructure
	1. Initialize Terraform.
	2. Validate the files.
	3. Generate a Terraform plan.
	4. Deploy the infrastructure using the plan file.
=================================================================================================================================================================================
mkdir -p ~/terraform/docker/networks
cd terraform/docker/networks
Create the files:

touch {variables.tf,image.tf,network.tf,main.tf}
Edit variables.tf:

vi variables.tf
variables.tf contents:

variable "mysql_root_password" {
  description = "The MySQL root password."
  default     = "P4sSw0rd0!"
}

variable "mysql_network_name" {
  description = "my nerwork"
  default     = "mysql_internal_network"
}


variable "mysql_volume_name" {
  description = "my volume nsme"
  default     = "mysql_data"
}

variable "container_name" {
  description = "my volume nsme"
  default     = "mysql_container"
}

################################################################################################################################################################3

vi image.tf

resource "docker_image" "mysql_image" {
  name = "mysql:5.7"
}

################################################################################################################################################################3
vi network.tf

resource "docker_network" "private_bridge_network" {
  name     = "${var.mysql_network_name}"
  driver   = "bridge"
  internal = true
}
################################################################################################################################################################3

cp -r ~/terraform/docker/networks ~/terraform/docker/volumes
cd ../volumes/
Create volumes.tf:

vi volumes.tf


resource "docker_volume" "mysql_data_volume" {
  name = "${var.mysql_volume_name}"
}

################################################################################################################################################################3
vi main.tf
main.tf contents:
provider "docker" {
}

resource "docker_container" "mysql_container" {
  name  = "${var.container_name}"
  image = "${docker_image.mysql_image.name}"
  env   = [
    "MYSQL_ROOT_PASSWORD=${var.mysql_root_password}"
  ]
  volumes {
    volume_name    = "${docker_volume.mysql_data_volume.name}"
    container_path = "/var/lib/mysql"
  }
  networks_advanced {
    name    = "${docker_network.private_bridge_network.name}"
    aliases = ["${var.mysql_network_alias}"]
  }
}

resource "null_resource" "sleep" {
  depends_on = ["docker_container.mysql_container"]
  provisioner "local-exec" {
    command = "sleep 15s"
  }
}

resource "docker_container" "blog_container" {
  name  = "ghost_blog"
  image = "${docker_image.ghost_image.name}"
  depends_on = ["null_resource.sleep", "docker_container.mysql_container"]
  env   = [
    "database__client=mysql",
    "database__connection__host=${var.mysql_network_alias}",
    "database__connection__user=${var.ghost_db_username}",
    "database__connection__password=${var.mysql_root_password}",
    "database__connection__database=${var.ghost_db_name}"
  ]
  ports {
    internal = "2368"
    external = "${var.ext_port}"
  }
  networks_advanced {
    name    = "${docker_network.public_bridge_network.name}"
    aliases = ["${var.ghost_network_alias}"]
  }
  networks_advanced {
    name    = "${docker_network.private_bridge_network.name}"
    aliases = ["${var.ghost_network_alias}"]
  }
}
Initialize Terraform:

terraform init
Validate the files:

terraform validate
Build a plan:

terraform plan -out=tfplan -var 'ext_port=8082'
Apply the plan:

terraform apply tfplan
List Docker volumes:

docker volume inspect mysql_data
List the data in mysql_data:

sudo ls /var/lib/docker/volumes/mysql_data/_data
Destroy the environment:

terraform destroy -auto-approve -var 'ext_port=8082'
