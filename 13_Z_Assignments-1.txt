Create Ghost module
Create a directory called ghost.
Your modules will be made up of three files: main.tf, variables.tf and outputs.tf.

main.tf
In main.tf you will deploy out two resources docker_image and docker_container. The docker_image resource name will be ghost_image.
The name will use th image_name variable.
The docker_container resource name will be ghost_container.
The name will be set using a varialbe called container_name. The image will be set usingdocker_image.ghost_image.latest. Set the external port to use the ext_port variable.

variables.tf
In variables.tf create three varialbes: image_name, container_name and ext_port.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Create root module
main.tf
In cloud_user directory create main.tf, variables.tf and outputs.tf. In main.tf will use the ghost module.
Set image_name using a variable called image_name.
Set container_name using a variable called container_name.
Set ext_port using a variable called ext_port.
In variables.tf create three image_name, container_name and ext_port.

variables.tf
The image_name will have a default value of ghost:latest with a description of Image for container.
The container_name will have a default value of blogwith a description ofName of the container.  
Theext_portwill have adefaultvalue of 80 with a description of External port for container.

outputs.tf
In outputs.tf create two outputs: ip and container_name. The ip output the ghost_container's ip_address attribute.
The container_name output the ghost_container's name attribute.

Deploy the infrastructure
Initialize Terraform.
Generate a Terraform plan and output a plan file.
Deploy the infrastructure using the plan file.
====================================================================================================================================================================
solution
mkdir modules
mkdir ghost
cd ~/Terraform/modules/ghost

touch {main.tf,variables.tf,outputs.tf}

Create Ghost module
vi main.tf
resource "docker_image" "ghost_image" {
  name = "${var.image_name}"
}

# Start the Container
resource "docker_container" "ghost_container"{
  name  = "${var.container_name}"
  image = "${docker_image.ghost_image.latest}"
  ports {
    internal = "${var.int_port}"
    external = "${var.ext_port}"
}
}

vi variables.tf
#Define variables
variable "image_name" {
  description = "Image for container."
  default     = "ghost:latest"
}

variable "container_name" {
  description = "Name of the container."
  default     = "ghost_blog"
}


variable "ext_port" {
  description = "External port for container."
  default     = "80"
}

vi outputs.tf
#Output the IP Address of the Container
output "ip_address" {
  value       = "${docker_container.ghost_container.ip_address}"
  description = "ghost_container's ip_address"
}

output "container_name" {
  value       = "${docker_container.ghost_container.name}"
  description = "ghost_container's name"
}

######################################################################################################################################################################################3
Create root module
mkdir modules

cd terraform/modules/

touch {main.tf,variables.tf,outputs.tf}

cd ~/terraform/basics/modules/
touch {main.tf,variables.tf,outputs.tf}
Edit main.tf:

vi main.tf

# Download the image
module "ghost" {
  source = "./ghost"
  image_name  = "${var.image_name}"
  container_name = "${var.container_name}"
  ext_port = "${var.ext_port}"
}


Edit variables.tf:

vi variables.tf

#Define variables
variable "container_name" {
  description = "Name of the container."
  default     = "myblog"
}
variable "image_name" {
  description = "Image for container."
  default     = "ghost:latest"
}
variable "int_port" {
  description = "Internal port for container."
  default     = "2368"
}
variable "ext_port" {
  description = "External port for container."
  default     = "80"
}


vi outputs.tf
output "ip_address" {
  value       = "${module.ghost.ip_address}"
  description = "The IP for the container."
}

output "container_name" {
  value       = "${module.ghost.container_name}"
  description = "The name of the container."
}
terraform init
Create the image plan:

terraform plan -out=ghost1.tfplan

terraform apply ghost1.tfplan

###################################################################################################################################################################

[ec2-user@ip-172-31-25-91 modules]$ terraform apply ghost1.tfplan
module.ghost.docker_container.ghost_container: Creating...
  attach:           "" => "false"
  bridge:           "" => "<computed>"
  command.#:        "" => "<computed>"
  container_logs:   "" => "<computed>"
  entrypoint.#:     "" => "<computed>"
  env.#:            "" => "<computed>"
  exit_code:        "" => "<computed>"
  gateway:          "" => "<computed>"
  hostname:         "" => "<computed>"
  image:            "" => "sha256:52972da38a93b1f507be32c4bb2291b204c2995cb55e939015d84d406cb40b00"
  ip_address:       "" => "<computed>"
  ip_prefix_length: "" => "<computed>"
  ipc_mode:         "" => "<computed>"
  labels.#:         "" => "<computed>"
  log_driver:       "" => "<computed>"
  log_opts.%:       "" => "<computed>"
  logs:             "" => "false"
  must_run:         "" => "true"
  name:             "" => "myblog"
  network_data.#:   "" => "<computed>"
  ports.#:          "" => "1"
  ports.0.external: "" => "80"
  ports.0.internal: "" => "2368"
  ports.0.ip:       "" => "0.0.0.0"
  ports.0.protocol: "" => "tcp"
  read_only:        "" => "false"
  restart:          "" => "no"
  rm:               "" => "false"
  shm_size:         "" => "<computed>"
  start:            "" => "true"
  user:             "" => "<computed>"
module.ghost.docker_container.ghost_container: Creation complete after 0s (ID: 61526b6208323194bcb9460b676de341706c3924d90bcfe8e48f5a2df0b2fd9a)

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

container_name = myblog
ip_address = 172.17.0.2
[ec2-user@ip-172-31-25-91 modules]$ docker container ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                          PORTS                  NAMES
61526b620832        52972da38a93        "docker-entrypoint.s…"   29 seconds ago      Up 28 seconds                   0.0.0.0:80->2368/tcp   myblog

